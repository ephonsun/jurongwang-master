package com.orong.utils.net;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.UnknownHostException;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;

import com.orong.Constant;
import com.orong.OrongApplication;
import com.orong.R;
import com.orong.entity.HttpDatas;
import com.orong.utils.CustomRunnable;
import com.orong.utils.FileUitls;
import com.orong.utils.LoadImageRespone;
import com.orong.utils.ThreadPoolService;

import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.widget.Toast;

/**
 * Copyright (c) 2013 Company,Inc. All Rights Reserved.
 * 
 * @Title: NetUtils.java
 * @Description: 一些网络应用的工具类
 * @author lanhaizhong
 * @date 2013年7月3日 上午11:29:42
 * @version V1.0
 */
public class NetUtils {
	/**
	 * 检查是否有可用网络
	 * 
	 * @param context
	 *            上下文环境
	 * @return 有可用网络返回true 否则返回false
	 */
	public static boolean isHasNet(Context context) {
		ConnectivityManager conn = (ConnectivityManager) context.getSystemService(context.CONNECTIVITY_SERVICE);
		NetworkInfo info = conn.getActiveNetworkInfo();// 获取联网状态网络
		if (info == null || !info.isAvailable()) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 下载图片
	 * 
	 * @param url
	 *            图片的Url
	 * @param context
	 *            上下文
	 * @param callback
	 *            回调
	 * @return
	 */
	public static CustomRunnable<String, LoadImageRespone> downLoadImage(String url, final Context context, final DownloadCallback callback) {
		return downLoadImage(url, context, null, null, callback);
	}

	/**
	 * 
	 * 下载图片
	 * 
	 * @param url
	 *            图片的Url
	 * @param context
	 *            上下文
	 * @param savePath
	 *            保存路径 （目录）为空表示不保存
	 * @param callback
	 *            回调
	 * @return
	 */
	public static CustomRunnable<String, LoadImageRespone> downLoadImage(String url, final Context context, String savePath, final DownloadCallback callback) {
		return downLoadImage(url, context, savePath, null, callback);
	}

	/**
	 * 下载图片
	 * 
	 * @param url
	 *            图片的Url
	 * @param context
	 *            上下文
	 * @param savePath
	 *            保存路径 （目录）为空表示不保存
	 * @param imagefile
	 *            图片文件名称 如果为空则以url的图片名称做文件名称 只接受 .png和.jpg后缀路径
	 * @param callback
	 *            回调
	 * @return
	 */
	public static CustomRunnable<String, LoadImageRespone> downLoadImage(String url, final Context context, String savePath, final String imagefileName,
			final DownloadCallback callback) {
		if (url == null) {
			return null;
		}
		CustomRunnable<String, LoadImageRespone> customRunnable = new CustomRunnable<String, LoadImageRespone>(new String[] { url, savePath }) {
			@Override
			public LoadImageRespone executeTask(String... param) {
				String uri = param[0];
				String savePath = param[1];
				DefaultHttpClient client = new DefaultHttpClient();
				HttpParams httParams = client.getParams();
				HttpConnectionParams.setConnectionTimeout(httParams, 20000);
				HttpConnectionParams.setSoTimeout(httParams, 20000);

				HttpProtocolParams.setContentCharset(httParams, HTTP.UTF_8);
				HttpProtocolParams.setUseExpectContinue(httParams, false);

				HttpGet get = new HttpGet(uri);
				try {
					HttpResponse responese = client.execute(get);
					int responeseCode = responese.getStatusLine().getStatusCode();
					if (responeseCode == HttpStatus.SC_OK) {
						HttpEntity httpentity = responese.getEntity();
						InputStream imStream = httpentity.getContent();
						LoadImageRespone respone = null;
						Bitmap bitmap = BitmapFactory.decodeStream(imStream);
						respone = new LoadImageRespone(bitmap);
						if (savePath != null) {
							File dire = FileUitls.createDirectory(context, savePath);
							if (dire.exists()) {
								String fileName = null;
								if (imagefileName != null && (imagefileName.endsWith(".jpg") || imagefileName.endsWith(".png"))) {
									fileName = "/" + imagefileName;
								} else {
									fileName = uri.substring(uri.lastIndexOf("/"));
								}
								File file = new File(dire + fileName);
								file.createNewFile();
								FileOutputStream out = new FileOutputStream(file);
								bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
								out.flush();
								out.close();
								respone.setFileSavePath(file);
							}

						}
						return respone;
					}
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void afterTask(LoadImageRespone result) {
				callback.loadCompleteCallback(result);
				super.afterTask(result);
			}
		};
		ThreadPoolService.execute(customRunnable);
		return customRunnable;
	}

	/**
	 * 发送网络请求
	 * 
	 * @param datas
	 *            请求参数集合
	 * @param context
	 *            上下文
	 * @param callback
	 *            回调
	 * @return
	 */
	public static HttpAsyncTask sendRequest(HttpDatas datas, Context context, TaskCallBack callback) {
		HttpAsyncTask task = new HttpAsyncTask(callback, context);
		task.execute(datas);
		return task;
	}

	/**
	 * 发送网络请求
	 * 
	 * @param datas
	 *            请求参数集合
	 * @param context
	 *            上下文
	 * @param dialogStr
	 *            进度文字
	 * @param callback
	 *            回调
	 * @return
	 */
	public static HttpAsyncTask sendRequest(HttpDatas datas, Context context, String dialogStr, TaskCallBack callback) {
		HttpAsyncTask task = new HttpAsyncTask(callback, context, dialogStr);
		task.execute(datas);
		return task;
	}

	/**
	 * 静态内部类 http异步请求类
	 * 
	 * @author lanhaizhong
	 * 
	 * @param HttpDatas
	 *            封装的一些请求参数
	 * @param Void
	 *            空
	 * @param Integer
	 *            返回值为int包装类型
	 */

	static class HttpAsyncTask extends AsyncTask<HttpDatas, Void, Integer> {

		private TaskCallBack callback;
		private Context context;
		private ProgressDialog dialog;
		private String dialogStr;

		/**
		 * 构造函数
		 * 
		 * @param callback
		 *            回调函数
		 */
		public HttpAsyncTask(TaskCallBack callback, Context context) {
			super();
			this.callback = callback;
			this.context = context;
		}

		/**
		 * 构造函数
		 * 
		 * @param callback
		 *            回调函数
		 */
		public HttpAsyncTask(TaskCallBack callback, Context context, String dialogStr) {
			super();
			this.callback = callback;
			this.context = context;
			this.dialogStr = dialogStr;

		}

		@Override
		protected Integer doInBackground(HttpDatas... params) {
			// TODO Auto-generated method stub
			HttpDatas datas = null;
			if (params != null) {
				datas = params[0];
			} else {
				return Constant.NULLPARAMEXCEPTION;
			}
			DefaultHttpClient client = new DefaultHttpClient();
			HttpParams httParams = client.getParams();
			HttpConnectionParams.setConnectionTimeout(httParams, 20000);
			HttpConnectionParams.setSoTimeout(httParams, 20000);

			HttpProtocolParams.setContentCharset(httParams, HTTP.UTF_8);
			HttpProtocolParams.setUseExpectContinue(httParams, false);
			if (OrongApplication.cookieStore != null) {
				client.setCookieStore(OrongApplication.cookieStore);
			}
			try {

				HttpResponse responese = null;
				if (datas.isPost()) {
					responese = doPost(datas, client);
				} else {
					responese = doGet(datas, client);
				}
				int responeseCode = responese.getStatusLine().getStatusCode();
				if (responeseCode == HttpStatus.SC_OK) {

					String result = EntityUtils.toString(responese.getEntity(), HTTP.UTF_8);
					System.out.println(result);
					OrongApplication.cookieStore = client.getCookieStore();
					return callback.excueHttpResponse(result);
				} else if (399 < responeseCode && responeseCode < 500) {// 请求无响应拒绝等
					return Constant.NO_RESPONSE;
				} else if (500 <= responeseCode && responeseCode < 600) {// 服务器出错出现异常
					return Constant.SERVER_EXCEPTION;
				} else {// 其它异常
					return Constant.RESPONESE_EXCEPTION;
				}
			} catch (ConnectTimeoutException e) {
				e.printStackTrace();
				return Constant.TIMEOUT;
			} catch (UnknownHostException e) {
				// 网络状态是否可用
				if (!NetUtils.isHasNet(context)) {
					return Constant.NO_NETWORK;// 无可用网络
				} else {
					e.printStackTrace();
					return Constant.RESPONESE_EXCEPTION;
				}

			} catch (IOException e) {
				e.printStackTrace();
				return Constant.RESPONESE_EXCEPTION;
			}

		}

		protected void onPreExecute() {
			if (dialogStr != null && !"".equals(dialogStr)) {
				dialog = new ProgressDialog(context) {
					@Override
					public void cancel() {
						if (!HttpAsyncTask.this.isCancelled()) {
							HttpAsyncTask.this.cancel(true);
						}
						Toast.makeText(context, context.getString(R.string.cancel), 0).show();
						super.cancel();
					}
				};
				dialog.setMessage(dialogStr);
				dialog.setCanceledOnTouchOutside(false);
				dialog.show();
			}
			callback.beforeTask();
			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(Integer result) {
			callback.afterTask(result);
			if (dialog != null) {
				dialog.dismiss();
			}
			super.onPostExecute(result);
		}

		/**
		 * 用get方式发送的请求
		 * 
		 * @param datas
		 *            请求参数
		 * @param client
		 *            httpclient实体
		 * @return http响应实体
		 * @throws ClientProtocolException
		 * @throws IOException
		 */
		private HttpResponse doGet(HttpDatas datas, DefaultHttpClient client) throws ClientProtocolException, IOException {
			// quest请求
			List<BasicNameValuePair> list = datas.getParamList();
			String url = datas.getUrl();
			if (list != null && list.size() > 0) {
				StringBuffer buffer = new StringBuffer("?");
				BasicNameValuePair pair0 = list.get(0);
				buffer.append(pair0.getName() + "=" + pair0.getValue());
				if (list.size() > 1) {
					for (int i = 1; i < list.size(); i++) {
						BasicNameValuePair pair = list.get(i);
						buffer.append("&" + pair.getName() + "=" + pair.getValue());
					}
				}
				url = url + buffer.toString();

			}
			System.out.println("url: " + url);
			HttpGet get = new HttpGet(url);
			// 请求头
			BasicNameValuePair header = datas.getHeader();
			if (header != null) {
				get.setHeader(header.getName(), header.getValue());
			}
			return client.execute(get);
		}

		/**
		 * 通过Post方式发送的请求
		 * 
		 * @param datas
		 *            请求参数
		 * @param client
		 *            httpclient实体
		 * @return http响应实体
		 * @throws ClientProtocolException
		 * @throws IOException
		 */
		private HttpResponse doPost(HttpDatas datas, DefaultHttpClient client) throws ClientProtocolException, IOException {
			List<BasicNameValuePair> list = datas.getParamList();
			if (list == null || list.size() == 0) {
				// 如果没有任何请求参数直接用get请求
				return doGet(datas, client);
			}
			String url = datas.getUrl();
			System.out.println("url: " + url);
			HttpPost post = new HttpPost(url);
			// 请求头
			BasicNameValuePair header = datas.getHeader();
			if (header != null) {
				post.setHeader(header.getName(), header.getValue());
			}

			HttpEntity entity = new UrlEncodedFormEntity(list);

			post.setEntity(entity);

			return client.execute(post);

		}

	}

	/**
	 * http一步请求的回调函数 接口
	 * 
	 * @author lanhaizhong
	 * 
	 */
	public interface TaskCallBack {

		/**
		 * 任务启动前的操作
		 */
		public void beforeTask();

		/**
		 * 后台执行http 请求得到相应后的处理
		 * 
		 * @param respondsStr
		 *            相应实体的字符串
		 * @return 状态码
		 */
		public int excueHttpResponse(String respondsStr);

		/**
		 * 任务结束会的操作
		 * 
		 * @param result
		 */
		public void afterTask(int result);

	}

	public interface DownloadCallback {
		public void loadCompleteCallback(LoadImageRespone respone);
	}
}
