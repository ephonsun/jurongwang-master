package com.orong.fragment;

import java.io.IOException;
import java.util.Vector;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.Result;
import com.orong.R;
import com.orong.activity.MainActivity;
import com.orong.utils.CustomRunnable;
import com.orong.utils.ThreadPoolService;
import com.orong.zxing.camera.CameraManager;
import com.orong.zxing.decoding.CaptureActivityHandler;
import com.orong.zxing.view.ViewfinderView;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.graphics.Bitmap;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.Bundle;
import android.os.Handler;
import android.os.Vibrator;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.View;
import android.view.ViewGroup;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.TextView;

public class CaptureFragment extends android.support.v4.app.Fragment {

	private TextView tvTitle;
	private CaptureActivityHandler handler;
	private ViewfinderView viewfinderView;
	private boolean hasSurface;
	private Vector<BarcodeFormat> decodeFormats;
	private String characterSet;
	private TextView txtResult;
	// private InactivityTimer inactivityTimer;
	private MediaPlayer mediaPlayer;
	private boolean playBeep;
	private static final float BEEP_VOLUME = 0.10f;
	private boolean vibrate;
	SurfaceView surfaceView;
	SurfaceHolder surfaceHolder;
	View view;

	CustomRunnable<Void, Integer> timerExitScan;// 定时退出扫描 如果操作者长时间呆在此页面不做任何操作
												// 将退出扫描界面

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment_capture, container, false);
		tvTitle = (TextView) view.findViewById(R.id.tv_title);
		tvTitle.setText(R.string.capture_title);
		CameraManager.init(getActivity().getApplication());
		txtResult = (TextView) view.findViewById(R.id.txtResult);
		hasSurface = false;
		this.view = view;
		return view;
	}

	public void viewOnscreen() {
		viewfinderView = (ViewfinderView) view.findViewById(R.id.viewfinder_view);
		surfaceView = (SurfaceView) view.findViewById(R.id.preview_view);
		surfaceHolder = surfaceView.getHolder();
		initCamera(surfaceHolder);
		decodeFormats = null;
		characterSet = null;
		playBeep = true;
		AudioManager audioService = (AudioManager) getActivity().getSystemService(Context.AUDIO_SERVICE);
		if (audioService.getRingerMode() != AudioManager.RINGER_MODE_NORMAL) {
			playBeep = false;
		}
		initBeepSound();
		vibrate = true;
	}

	public void viewOnscreen2() {
		viewfinderView = (ViewfinderView) view.findViewById(R.id.viewfinder_view);
		surfaceView = (SurfaceView) view.findViewById(R.id.preview_view);
		surfaceHolder = surfaceView.getHolder();
		if (hasSurface) {
			initCamera(surfaceHolder);
		} else {
			System.out.println("no hasSurface");
			surfaceHolder.addCallback(new Callback() {

				@Override
				public void surfaceDestroyed(SurfaceHolder holder) {
					hasSurface = false;
				}

				@Override
				public void surfaceCreated(SurfaceHolder holder) {
					System.out.println("surfaceCreated");
					if (!hasSurface) {
						hasSurface = true;
						initCamera(holder);
					}
				}

				@Override
				public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

				}
			});
			surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		}
		decodeFormats = null;
		characterSet = null;

		playBeep = true;
		AudioManager audioService = (AudioManager) getActivity().getSystemService(Context.AUDIO_SERVICE);
		if (audioService.getRingerMode() != AudioManager.RINGER_MODE_NORMAL) {
			playBeep = false;
		}
		initBeepSound();
		initCamera(surfaceHolder);
		vibrate = true;
	}

	// 退出时的操作
	public void viewOutscreen() {
		if (handler != null) {
			handler.quitSynchronously();
			handler = null;
			if (timerExitScan != null) {
				timerExitScan.cancleTask();
			}

		}
		CameraManager.get().closeDriver();
	}

	@Override
	public void onDestroy() {
		// inactivityTimer.shutdown();
		super.onDestroy();
	}

	private void initCamera(SurfaceHolder surfaceHolder) {	
		try {
			CameraManager.get().openDriver(surfaceHolder);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return;
		} catch (RuntimeException e) {
			e.printStackTrace();
			return;
		}
		if (handler == null) {
			handler = new CaptureActivityHandler(this, decodeFormats, characterSet);
		}
	}

	public ViewfinderView getViewfinderView() {
		return viewfinderView;
	}

	public Handler getHandler() {
		return handler;
	}

	public void drawViewfinder() {
		viewfinderView.drawViewfinder();

	}

	public void handleDecode(Result obj, Bitmap barcode) {
		if (timerExitScan != null) {
			timerExitScan.cancleTask();
		}
		ThreadPoolService.execute(instanceCustomRunnable());
		// inactivityTimer.onActivity();
		// viewfinderView.drawResultBitmap(barcode);
		playBeepSoundAndVibrate();
		txtResult.setText(obj.getBarcodeFormat().toString() + ":" + obj.getText());
		Log.i("Captrue", obj.getText());
	}

	public void restartPreviewAfterDelay(long delayMS) {
		if (handler != null) {
			handler.sendEmptyMessageDelayed(R.id.restart_preview, delayMS);
		}
	}

	private void initBeepSound() {
		if (playBeep && mediaPlayer == null) {
			getActivity().setVolumeControlStream(AudioManager.STREAM_MUSIC);
			mediaPlayer = new MediaPlayer();
			mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
			mediaPlayer.setOnCompletionListener(beepListener);

			AssetFileDescriptor file = getResources().openRawResourceFd(R.raw.beep);
			try {
				mediaPlayer.setDataSource(file.getFileDescriptor(), file.getStartOffset(), file.getLength());
				file.close();
				mediaPlayer.setVolume(BEEP_VOLUME, BEEP_VOLUME);
				mediaPlayer.prepare();
			} catch (IOException e) {
				mediaPlayer = null;
			}
		}
	}

	private static final long VIBRATE_DURATION = 200L;

	private void playBeepSoundAndVibrate() {
		if (playBeep && mediaPlayer != null) {
			mediaPlayer.start();
		}
		if (vibrate) {
			Vibrator vibrator = (Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE);
			vibrator.vibrate(VIBRATE_DURATION);
		}
	}

	/**
	 * When the beep has finished playing, rewind to queue up another one.
	 */
	private final OnCompletionListener beepListener = new OnCompletionListener() {
		public void onCompletion(MediaPlayer mediaPlayer) {
			mediaPlayer.seekTo(0);
		}
	};

	public void setHasSurface(boolean hasSurface) {
		this.hasSurface = hasSurface;
	}

	private CustomRunnable instanceCustomRunnable() {
		timerExitScan = new CustomRunnable<Void, Integer>(null) {

			@Override
			public Integer executeTask(Void... param) {
				// TODO Auto-generated method stub
				try {
					Thread.sleep(3 * 10 * 1000L);
					return 100;
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				return 0;
			}

			@Override
			public void afterTask(Integer result) {
				// TODO Auto-generated method stub
				int i = result;
				// if (i != 0) {
				((MainActivity) getActivity()).getViewPager().setCurrentItem(0);
				// }
				super.afterTask(result);

			}
		};
		return timerExitScan;

	}

}